/*
* AccelerationPort.java
*
* Definition of a temporary port dataset for body acceleration.
*
*-----------------------------------------------------------------------------
* Modification History:
*
*  2009-04
*      File created
*      Initial version.
*
*
*  2009-11-29
*      Boundary condition handling cleaned up - A. Brandt:
*
*      File under GPL - see OpenSimKit Documentation.
*
*      No warranty and liability for correctness by author.
*
*/
package org.opensimkit.ports;

import org.opensimkit.Kernel;
import org.opensimkit.manipulation.Manipulatable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
* Definition of a port dataset for acceleration data.
*
* @author A. Brandt
* @version 1.1
* @since 3.0.0
*/

public final class AccelerationPort extends BasePort  {
    private static final Logger LOG
            = LoggerFactory.getLogger(AccelerationPort.class);
    @Manipulatable private double magnitude;
    @Manipulatable private double[] unitVector = new double[3];

    /**
     * This constructor is needed for the AccelerationPort initialisation during
     * the XML file parsing.
     */
    public AccelerationPort(final String name, final Kernel kernel) {
        super(name, kernel);
    }

    public void setMagnitude(final double magnitude) {
        this.magnitude = magnitude;
    }

    public double getMagnitude() {
        return magnitude;
    }

    public void setUnitVector(final double[] newUnitVector) {
        this.unitVector = setVector(newUnitVector, 3);
    }

    public double[] getUnitVector() {
        return unitVector;
    }


    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();

        result.append(this.getClass().getName());
        result.append(": magnitude == ");
        result.append(magnitude);
        result.append("; unitVector == {");
        result.append(unitVector[0]);
        result.append(", ");
        result.append(unitVector[1]);
        result.append(", ");
        result.append(unitVector[2]);
        result.append("}.");

        return result.toString();
    }
}
